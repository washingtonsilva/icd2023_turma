---
title: "Aula03 - Introdução à Ciência dos Dados"
subtitle: "Mestrado Profissional em Administração"
author: "Seu Nome"
date: "2023-04-13"
output: html_notebook
---

```{r setup, include=FALSE}
# configuracoes globais
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, 
                      digits = 999, scipen = 999)

# pacotes utilizados
library(PMwR)
```


## Exercício: Calcule as seguintes probabilidades associadas a uma distribuição normal padronizada.

a. $P(Z <= 1.25)$


b. $P(Z > 1.25)$


c. $P(Z <= - .25)$


d. $P(-0.8 <= Z <= 1..25)$


## Distribuicao Normal: Calcule os quantis associados às seguintes probabilidades

a. $P(Z < q)$ = 0.9798


b. $P(Z < q)$ = 0.2546


c. $P(Z > q)$ = 0.1075


d. $P(Z > q)$ = 0.9418


## Método de Monte Carlo

Estimativa da probabilidade de que uma moeda honesta resulte "cara" em 
$n$ lançamentos via simulaçào de Monte Carlo:

```{r}
mean(sample(0:1, 10, replace = T))
mean(sample(0:1, 100, replace = T))
mean(sample(0:1, 1000, replace = T))
mean(sample(0:1, 10000, replace = T))
mean(sample(0:1, 100000, replace = T))
mean(sample(0:1, 1000000, replace = T))
```


Estimativa da probabilidade de que três lançamentos deu uma moeda resultem 
em três caras:

```{r}
# 1. programando as tentativas (lancamentos)
trial <- sample(0:1, 3, replace = TRUE)

# 2. determinando o "sucesso"
if (sum(trial) == 3) 1 else 0

# 3. replicacoes
n <- 10000 # numero de repeticoes
simvetor <- numeric(n) # inicializa o vetor

for (i in 1:n) {
trial <- sample(0:1, 3, replace = TRUE)
sucesso <- if (sum(trial) == 3) 1 else 0
simvetor[i] <- sucesso}

# estimativa da probabilidade 
mean(simvetor) 
```

Integração via Simulação de Monte Carlo

```{r}
# fixando a semente do algoritmo
set.seed(2023)

# definindo a funcao de interese
f = function(x) {sin(x*(1-x))/(1+x+sqrt(x))}

# integracao via SMC
u = runif(100000)
mean(f(u))
```

Podemos checar a estimativa utilizando a funçao `integrate`:

```{r}
integrate(f,0,1)
```


Análise de Insolvência via Simulação de Monte Carlo

```{r}
library(triangulr)
library(highcharter)

n <- 10000 # numero de repeticoes
fi_sim <- c() # inicializa o vetor

for (i in 1:n) {
  a <- rtri(1, 0.12, 0.2, 0.15)
  b <- rtri(1, 0.8, 2.8, 1.6)
  c <- rtri(1, 0.8, 1, 0.9)
  d <- rtri(1, 4, 5.3, 4.5)
  e <- rtri(1, 3.5, 8, 5)
  fi <- 0.55*a + 1.65*b + 3.55*c - 1.06*d - 0.3333*e 
  fi_sim[i] <- fi
}

dplyr::glimpse(fi_sim)

# histograma dos FI simulados
hchart(fi_sim, name = "Fator de Insolvência") |> 
  hc_title(text = "Fator de Insolvência de Kanitz via Simulação de Monte Carlo")

```


Estimativa da probabilidade de insolvencia: P(FI) < -3

```{r}
sum(fi_sim < -3)/n
```

Estimativa da probabilidade de solvencia: P(FI) > 0

```{r}
sum(fi_sim > 0)/n
```

Análise de Viabilidade Econômica sob Incerteza

```{r}

# informacoes sobre o projeto
fc0 <- runif(100000, 65000, 85000)
receita <- runif(100000, 12000, 16000)
valor_residual <- rtri(100000, 4000, 6000, 5000)
tempo <- rtri(100000, 9, 11, 10)
taxa <- rtri(100000, 0.1, 0.15, 0.12)

# VPL 
vpl <- receita*(1 - (1 + taxa)^(-tempo))/taxa + valor_residual/(1 + taxa)^(tempo)        - fc0

# histograma dos VPL simulados
hchart(vpl, name = "VPL") |> 
  hc_title(text = "VPL de um Prjeto via Simulação de Monte Carlo")

```

Estimativa da viabilidade do projeto P(VPL > 0):

```{r}
sum(vpl > 0)/100000
```


Estimativa da inviabilidade do projeto P(VPL <= 0):

```{r}
sum(vpl <= 0)/100000
```



## Valor-em-Risco (VaR)

Importando os dados de precos de tres acoes

```{r}
precos <- readr::read_csv('dados/stocks.csv')
head(precos)
dplyr::glimpse(precos)
```


Calculando vetores individuais contendo os retornos simples líquidos das
ações:

```{r}
retornos <- as.matrix(PMwR::returns(precos))
head(retornos)
```

Definindo o valor da carteira e a probabilidade p:

```{r}
valor_carteira <- 1000
p <- 0.01
```


### VaR por Simulação Histórica - 1 ação

```{r}
retA <- retornos[,1]                     # seleciona retornos de A - coluna 1
retAs <- sort(retA)                      # ordena os retornos em ordem crescente
plot(retAs, type = "p")                  # grafico dos retornos ordenados
op <- ceiling(length(retAs)*p)            # (T * p) =  Min(Z) > length(retA)*p
VaR_A_HS  <-  -retAs[op]*valor_carteira  # Calculo do VaR 
VaR_A_HS
```


## VaR por Simulação Histórica - carteira com 2 ações


definindo a matriz de pesos da carteira:

```{r}
w = matrix(c(0.3, 0.2, 0.5)) 
w
```


obtendo os retornos da carteira

```{r}
y <- retornos
ret <- y %*% w  #  %*% operador para multiplicar matrizes      
rets = sort(ret)   #  ordena os retornos em ordem crescente

VaR_carteira = -rets[op]*valor_carteira
VaR_carteira
```

Calculando o VaR da carteira:

```{r}
VaR_carteira = -rets[op]*valor_carteira
VaR_carteira
```


## VaR Gaussiano - 1 ação


```{r}
sigma <- sd(retA) # estimando sigma
VaR_normal  <- -sigma * qnorm(p) * valor_carteira
print(VaR_normal)
```


## VaR Gaussiano - carteira com 3 ações


Calculando a volatilidade (desvio-padrao) da carteira de investimentos:

```{r}
sigma_carteira <- sqrt(t(w) %*% cov(y) %*% w)[1] 
sigma_carteira
```

Nota: `[1]` ao final da expressão, converte um elemento de uma matriz em um 
número.

```{r}
VaR_carteira <- -sigma_carteira*qnorm(p)*valor_carteira
VaR_carteira
```
